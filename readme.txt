一、键盘板通过rk3399的iic3升级单片机程序，2023-05-06
1.目前具备基本的升级功能，从iap升级是可以成功的。
2.升级的时候，没有跑应用程序，卸载了jc_keyboard.ko文件。
3.目前问题还是比较多：
3.1 rk3399读取数据的时候，似乎总是读取两个字节，比如我上传md5的时候，我发送了34个字节，3399却只收到了17个字节，确实是偶数字节丢失了。
      原因未知，现在的处理就是间隔发送数据，这肯定是要排查的。
3.2 ymodem发送数据的时候会发送重复帧，目前通过单片机把数据过滤了一下，但是这应该也是有问题，首先就是没必要重复发送数据，浪费时间空间。
      第二可能也会导致其他风险。
3.3 单片机程序升级失败之后的处理，比如这次重复帧的时候，程序是烧到了单片机的flash中，但是因为有重复帧，导致单片机不能启动，这个问题该如何处理？需要考虑一下。目前的现象就是单片机反复进入app，但是app又不能正常启动，导致看门狗超时，就这样反复，也无法进入烧写模式。
4.先进行第一版备份吧，这些问题肯定还要继续解决的。其他问题待测。




二、2023-05-06
1. 试了一下连续读取md5的数据倒是正常的。 上述3.1出现的问题得到了改善。会不会出现其他问题，待测。


三、2023-05-08，功能基本实现，还要看看测试的情况。
1.因为dg项目中有两个单片机升级，一个是屏，一个是键盘，为了防止升级了错误的单片机，将键盘的单片机的app偏移地址改为0x5c00
2.键盘端的（app）软件已经更新了，目前来看是可以升级的。
3.将checksum的起始头改为了0x55,0xaa.其他版本是0x5a,0xa5.
4.linux端的这个软件也进行了一些改进，优化下载前的读取操作（读取到0x43就继续读，否则就退出读取）。直接进入发送命令阶段。
5.重复帧的问题还是存在，已经改进。（看到单片机的打印，每一帧至少发送了两次。）
  这个问题主要是擦除flash和写flash时需要一些时间，这个时候的应答数据没有准备好，导致3399端没有读取到应答，然后发送端又重新发送了一次。
6.iap单片机部分进行了部分优化，下载后数据拷贝的部分去除，全局缓存tab_1024 注释掉。
7.iic与uart的一个主要区别是，iic的数据不能主动发送出去，必须要等到主机来读取，才能发送数据。
   目前单片机是开了缓存的，也就是发送数据的时候，实际是写道缓存中，发送没有，需要看主机读了没有。



四、2023-05-08，2
1.iap增加md5的计算，下载后计算一次md5，核对是否一致，一致则更新，不一致则不更新，需要重新下载。



五、2023-05-09
1.完成合并文件输出，在jc_dg_keyboard_gd32mcu_freertos-2023-505-debug\output目录中gd32f103-iap_jc_dg_keyboard_gd32.bin文件
这个文件用于出厂烧录到单片机
2.在jc_dg_keyboard_gd32mcu_freertos-2023-505-debug\temp目录中
  jc_dg_keyboard_gd32.bin 和 jc_dg_keyboard_gd32.md5 会同步生成，用于在rk3399中升级单片机程序。
3.本次包含combin的源码，该命令需要三个参数，iap文件，app文件，输出文件名。建议文件名不要超过32字节。
4.调试串口下载时，单片机自己计算md5值，并且保存到flash中。
5.单片机的app版本升到5，调试串口可以打印出md5值










